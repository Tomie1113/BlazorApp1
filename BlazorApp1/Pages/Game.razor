@page "/main"
@using BlazorApp1.Data
@using Microsoft.AspNetCore.Localization
@using MySql.Data.MySqlClient
@using System.Diagnostics;
@inject NavigationManager Navigation
@inject IHttpContextAccessor httpContextAccessor
@using System.Globalization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Game> Localizer
@inject IJSRuntime JSRuntime
@code {
    private List<Flower> shopFlowers = new();
    async void OpenShop()
    {
        await ShowCoinChange(-1, "defaultSound");
        showSettings = false;
        showShop = true;
        showMyFlowers = false;
        showShopError = false;

        await LoadShopFlowers(); // теперь await
        StateHasChanged();
    }
    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;

            await JSRuntime.InvokeVoidAsync("eval",
                @"document.body.addEventListener(
                'click',
                () => window.initAudio(),
                { once: true }
              );");
        }
    }
    private bool ShowCoinNotification = false;
    private bool showTutorialPrompt = false;
    private bool tutorialYes = false;
    private string CoinMessage = "";
    private bool IsPositiveCoin = true;
    private string shopTitleMessage = "";
    private string shopErrorMessage = "";
    private string zeroFlowersMessage = "";
    private string panelState = "hidden";
    private string buttonState = "hidden";
    private int _musicVolume = 100;
    private int countTutor = 1;
    private string idElement = "";
    private bool IsLeftPanelActive = false;

    private bool TutorFlower = false;
    private bool TutorQuestion = false;
    private bool TutorMoney = false;
    private bool TutorSettings = false;
    private bool TutorMyFlowers = false;
    private bool TutorInstruct = false;
    private bool TutorShop = false;
    private bool TutorEnd = false;
    private string InstructionTytle = "";
    private string InstructionText = "";

    public int MusicVolume
    {
        get => _musicVolume;
        set
        {
            if (_musicVolume == value) return;
            _musicVolume = value;
            _ = JSRuntime.InvokeVoidAsync("setMusicVolume", _musicVolume / 100.0);
            _ = JSRuntime.InvokeVoidAsync("saveVolumePrefs", _musicVolume, _effectsVolume);

        }
    }

    public class DomRect
    {
        public double Top { get; set; }
        public double Left { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
    }

    private int _effectsVolume = 100;
    public int EffectsVolume
    {
        get => _effectsVolume;
        set
        {
            if (_effectsVolume == value) return;
            _effectsVolume = value;
            _ = JSRuntime.InvokeVoidAsync("setEffectsVolume", _effectsVolume / 100.0);
            _ = JSRuntime.InvokeVoidAsync("saveVolumePrefs", _musicVolume, _effectsVolume);
        }
    }



    private async Task ShowCoinChange(int delta, string sound = "defaultSound")
    {
        try
        {
            if (delta == -1)
            {
                // ShowCoinNotification = true;
                // await InvokeAsync(StateHasChanged);

                // // 🔊 Проигрываем звук
                try
                {
                    await JSRuntime.InvokeVoidAsync("playSound", sound);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ошибка воспроизведения звука: {ex.Message}");
                }
                // await Task.Delay(600);
                // ShowCoinNotification = false;
                // await InvokeAsync(StateHasChanged);
                return;
            }
            if (delta == 0)
            {
                // ❌ Неверный ответ
                IsPositiveCoin = false;
                CoinMessage = "Ответ неверный!";
            }
            else
            {
                // ✅ Верный ответ / покупка / продажа
                IsPositiveCoin = delta > 0;
                CoinMessage = IsPositiveCoin ? $"+{delta} монет" : $"-{Math.Abs(delta)} монет";
            }

            ShowCoinNotification = true;
            await InvokeAsync(StateHasChanged);

            // 🔊 Проигрываем звук
            try
            {
                await JSRuntime.InvokeVoidAsync("playSound", sound);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка воспроизведения звука: {ex.Message}");
            }

            // ⏱️ Уменьшаем задержку до 600 мс вместо 1500
            await Task.Delay(600);
            ShowCoinNotification = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка в ShowCoinChange: {ex.Message}");
        }
    }
    private string GetStateDisplayName(string state, Flower flower)
    {
        if (flower.IsDead)
            return "Сдох цветок";

        return state switch
        {
            "pre_fall" => "Увядает",
            "fall" => "Уже почти умер",
            "pre_rise" => "Расцветает",
            "rise" => "Цветёт",
            _ => "Жив"
        };
    }
    private async Task HideCoinNotificationAfterDelay(int delayMs)
    {
        await Task.Delay(delayMs);
        ShowCoinNotification = false;
        StateHasChanged();
    }
    private async Task LoadShopFlowers()
    {
        shopFlowers.Clear();
        var connStr = "Server=31.31.197.28;Port=3310;Database=u3126643_flowers_db;User=u3126643_user_app;Password=xxxKKTX6815!;Charset=utf8mb4;SslMode=none;";
        using var conn = new MySqlConnection(connStr);
        await conn.OpenAsync();

        var cmd = new MySqlCommand("SELECT id, name, code, price_buy, price_sell FROM flowertypes", conn);
        using var reader = await cmd.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            shopFlowers.Add(new Flower
                {
                    TypeId = reader.GetInt32(0),
                    DisplayName = reader.GetString(1),
                    CodeName = reader.GetString(2),
                    PriceBuy = reader.GetInt32(3),
                    PriceSell = reader.GetInt32(4),
                    Hp = 15,
                    MaxHp = 15
                });
        }
    }

    private async void BuyFlower(Flower flower)
    {
        if (UserSession.CurrentUser.Coins < flower.PriceBuy)
        {
            showShop = false;
            showShopError = true;
            shopTitleMessage = "Недостаточно средств";
            shopErrorMessage = "У Вас недостаточно монет. Продайте свои цветы или отвечайте на вопросы правильно и получайте вознаграждение!";
            return;
        }

        var connStr = "Server=31.31.197.28;Port=3310;Database=u3126643_flowers_db;User=u3126643_user_app;Password=xxxKKTX6815!;Charset=utf8mb4;SslMode=none;";
        using var conn = new MySqlConnection(connStr);
        await conn.OpenAsync();

        // Найдём первый свободный слот (0-5)
        var usedSlots = UserSession.CurrentUser.Flowers.Select(f => f.Slot).ToHashSet();
        int freeSlot = Enumerable.Range(0, 6).FirstOrDefault(i => !usedSlots.Contains(i));
        if (usedSlots.Count >= 6)
        {
            showShop = false;
            showShopError = true;
            shopTitleMessage = "Отсутствие мест";
            shopErrorMessage = "У Вас нет свободных мест для цветов.\nВырастите и продайте цветы, чтобы посадить новые!";
            return;
        }

        // Добавить цветок в БД
        var insertCmd = new MySqlCommand("INSERT INTO flowers (user_id, type_id, hp, pot_slot) VALUES (@uid, @type, @hp, @slot)", conn);
        insertCmd.Parameters.AddWithValue("@uid", UserSession.CurrentUser.Id);
        insertCmd.Parameters.AddWithValue("@type", flower.TypeId);
        insertCmd.Parameters.AddWithValue("@hp", 15);
        insertCmd.Parameters.AddWithValue("@slot", freeSlot);
        await insertCmd.ExecuteNonQueryAsync();

        // Обновить монеты в БД
        UserSession.CurrentUser.Coins -= flower.PriceBuy;
        await ShowCoinChange(-flower.PriceBuy, "defaultSound");

        var updateCoins = new MySqlCommand("UPDATE users SET coins = @coins WHERE id = @id", conn);
        updateCoins.Parameters.AddWithValue("@coins", UserSession.CurrentUser.Coins);
        updateCoins.Parameters.AddWithValue("@id", UserSession.CurrentUser.Id);
        await updateCoins.ExecuteNonQueryAsync();

        // Добавить в список в C#
        UserSession.CurrentUser.Flowers.Add(new Flower
            {
                TypeId = flower.TypeId,
                DisplayName = flower.DisplayName,
                CodeName = flower.CodeName,
                PriceBuy = flower.PriceBuy,
                PriceSell = flower.PriceSell,
                Hp = 9,
                MaxHp = 15,
                Slot = freeSlot
            });

        StateHasChanged();
    }

    private void InstructionsButton()
    {
        panelState = panelState == "hidden" ? "visible" : "hidden";
    }


    private static readonly string[] PotImages = new[]
    {
        "cream_box.png",
        "cream_box.png",
        "cream_box.png",
        "cream_box.png",
        "cream_box.png",
        "cream_box.png",
    };
    private string GetFlowerImage(int slot)
    {

        var flower = UserSession.CurrentUser.Flowers.FirstOrDefault(f => f.Slot == slot);
        return flower != null
            ? flower.GetStateImage()
            : "/images/flowers/empty.png"; // Заглушка, если цветка нет
    }
    private string GetPotImage(int index)
    {
        return $"/images/box/{PotImages[index % PotImages.Length]}";
    }
    bool showSettings = false;
    bool showShop = false;
    bool showMyFlowers = false;
    bool showShopError = false;

    async void OpenSettings()
    {
        await ShowCoinChange(-1, "defaultSound");
        showSettings = true;
        showShop = false;
        showMyFlowers = false;
        StateHasChanged();
    }

    async void OpenMyFlowers()
    {
        await ShowCoinChange(-1, "defaultSound");
        showSettings = false;
        showShop = false;
        showMyFlowers = true;
        StateHasChanged();
    }

    async void CloseModals()
    {
        await ShowCoinChange(-1, "defaultSound");
        showSettings = false;
        showShop = false;
        showMyFlowers = false;
        StateHasChanged();
    }

    void GoToLogin()
    {
        // 1. Остановить и освободить таймер
        if (questionTimer != null)
        {
            questionTimer.Stop();
            questionTimer.Dispose();
            questionTimer = null;
        }

        // 2. Очистить состояние
        activeQuestions.Clear();
        currentQuestionSlot = null;
        selectedAnswerId = null;

        showSettings = false;
        showShop = false;
        showMyFlowers = false;

        // 3. Сбросить пользователя
        UserSession.CurrentUser = null;

        // 4. Перейти на страницу регистрации
        Navigation.NavigateTo("/registration", forceLoad: true);
    }

    private string selectedLanguage;

    private string SelectedLanguage
    {
        get => selectedLanguage;
        set
        {
            if (selectedLanguage != value)
            {
                selectedLanguage = value;
                OnLanguageChanged();
            }
        }
    }

    private void OnLanguageChanged()
    {
        // Place your callback logic here.
        // For example, navigating to the SetCulture page:
        Navigation.NavigateTo($"/SetCulture?culture={selectedLanguage}&returnUrl={Navigation.ToBaseRelativePath(Navigation.Uri)}", forceLoad: true);
    }

    private int musicVolume = 50;
    private int effectsVolume = 50;

    private async void SellFlower(Flower flower, int price)
    {
        var connStr = "Server=31.31.197.28;Port=3310;Database=u3126643_flowers_db;User=u3126643_user_app;Password=xxxKKTX6815!;Charset=utf8mb4;SslMode=none;";
        using var conn = new MySqlConnection(connStr);
        await conn.OpenAsync();

        // 1. Удалить цветок из таблицы
        var deleteCmd = new MySqlCommand("DELETE FROM flowers WHERE id = @id LIMIT 1", conn);
        deleteCmd.Parameters.AddWithValue("@id", flower.Id);
        await deleteCmd.ExecuteNonQueryAsync();

        // 2. Обновить монеты пользователя
        UserSession.CurrentUser.Coins += price;
        await ShowCoinChange(+flower.PriceBuy, "defaultSound");


        var updateCoins = new MySqlCommand("UPDATE users SET coins = @coins WHERE id = @id", conn);
        updateCoins.Parameters.AddWithValue("@coins", UserSession.CurrentUser.Coins);
        updateCoins.Parameters.AddWithValue("@id", UserSession.CurrentUser.Id);
        await updateCoins.ExecuteNonQueryAsync();

        // 3. Удалить цветок из списка цветов
        UserSession.CurrentUser.Flowers.Remove(flower);

        // 4. Закрыть вопрос, если он связан с этим цветком
        if (currentQuestionSlot.HasValue && currentQuestionSlot.Value == flower.Slot)
        {
            CloseQuestionModal();
        }

        // 5. Удалить вопрос из activeQuestions
        if (activeQuestions.ContainsKey(flower.Slot))
        {
            activeQuestions.Remove(flower.Slot);
        }

        StateHasChanged();
    }

    private void ThrowOutFlower(Flower flower)
    {
        // 1. Удалить цветок из списка цветов
        UserSession.CurrentUser.Flowers.Remove(flower);

        // 2. Закрыть вопрос, если он связан с этим цветком
        if (currentQuestionSlot.HasValue && currentQuestionSlot.Value == flower.Slot)
        {
            CloseQuestionModal();
        }

        // 3. Удалить вопрос из activeQuestions
        if (activeQuestions.ContainsKey(flower.Slot))
        {
            activeQuestions.Remove(flower.Slot);
        }

        // 4. TODO: Удалить цветок из БД
        // Это можно добавить позже, если потребуется

        StateHasChanged();
    }
    private Dictionary<int, QuestionWithAnswers?> activeQuestions = new(); // слот => вопрос или null
    private int? currentQuestionSlot = null;
    private int? selectedAnswerId = null;
    private System.Timers.Timer questionTimer;
    private HashSet<int> validTypeIds = new();

    public class QuestionWithAnswers
    {
        public int Id { get; set; }
        public string Content { get; set; } = string.Empty;
        public List<Answer> Answers { get; set; } = new();
    }

    public class Answer
    {
        public int Id { get; set; }
        public string Content { get; set; } = string.Empty;
        public bool IsCorrect { get; set; }
    }

    protected override async void OnInitialized()
    {
        //if (UserSession.CurrentUser.IsNewUser)
        if (true)
        {
            showTutorialPrompt = true;
        }

        selectedLanguage = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;

        var req = httpContextAccessor.HttpContext?.Request;
        if (req?.Cookies.TryGetValue("musicVolume", out var mvStr) == true &&
            int.TryParse(mvStr, out var mv))
            MusicVolume = mv;

        if (req?.Cookies.TryGetValue("effectsVolume", out var evStr) == true &&
            int.TryParse(evStr, out var ev))
            EffectsVolume = ev;

        await LoadValidTypeIds();

        questionTimer = new System.Timers.Timer();
        questionTimer.Elapsed += async (s, e) => await HandleTimerTick();
        questionTimer.AutoReset = false;
        AdjustTimerInterval();
        InstructionTextBox();
    }


    private async Task HandleTimerTick()
    {
        await AskNextQuestion();
        AdjustTimerInterval();  // пересчёт после каждого тика
    }
    private void AdjustTimerInterval()
    {
        int activeCount = activeQuestions.Values.Count(q => q != null);

        double newInterval;

        if (activeCount == 0)
            newInterval = 1000;
        else if (activeCount == 1)
            newInterval = 1500;
        else if (activeCount == 2)
            newInterval = 3000;
        else if (activeCount == 3)
            newInterval = 5000;
        else
            newInterval = 7000;

        questionTimer.Interval = newInterval;
        questionTimer.Start();
    }
    private async Task LoadValidTypeIds()
    {
        try
        {
            var connStr = "Server=31.31.197.28;Port=3310;Database=u3126643_flowers_db;User=u3126643_user_app;Password=xxxKKTX6815!;Charset=utf8mb4;SslMode=none;";
            using var conn = new MySqlConnection(connStr);
            await conn.OpenAsync();

            var cmd = new MySqlCommand("SELECT DISTINCT q.flowertype_id FROM questions q JOIN answers a ON q.id = a.question_id", conn);
            using var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                validTypeIds.Add(reader.GetInt32(0));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[LoadValidTypeIds] ⚠️ Exception: {ex.Message}");
        }
    }

    private async Task AskNextQuestion()
    {
        try
        {
            if (UserSession.CurrentUser == null)
            {
                Debug.WriteLine("❌ AskNextQuestion cancelled: user is null");
                return;
            }
            var candidates = UserSession.CurrentUser.Flowers
                .Where(f => !f.IsDead && !activeQuestions.ContainsKey(f.Slot) && validTypeIds.Contains(f.TypeId))
                .Select(f => f.Slot)
                .ToList();

            if (candidates.Count == 0)
            {
                Debug.WriteLine("❌ No candidates found for question");
                return;
            }

            var random = new Random();
            var slot = candidates[random.Next(candidates.Count)];

            await InvokeAsync(async () =>
            {
                await LoadQuestionForSlot(slot);
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[AskNextQuestion] ⚠️ Exception: {ex.Message}");
        }
    }

    private async Task LoadQuestionForSlot(int slot)
    {
        try
        {
            if (UserSession.CurrentUser == null)
            {
                Debug.WriteLine("❌ Current user is null");
                return;
            }
            var flower = UserSession.CurrentUser.Flowers.FirstOrDefault(f => f.Slot == slot);
            if (flower == null || flower.IsDead || activeQuestions.ContainsKey(slot))
            {
                Debug.WriteLine($"⛔ Skipping slot {slot}: null or dead or already active");
                return;
            }

            Debug.WriteLine($"🌸 Flower slot {flower.Slot}: {flower.DisplayName} (CodeName: {flower.CodeName}, HP: {flower.Hp}/15)");

            var connStr = "Server=31.31.197.28;Port=3310;Database=u3126643_flowers_db;User=u3126643_user_app;Password=xxxKKTX6815!;Charset=utf8mb4;SslMode=none;";
            using var conn = new MySqlConnection(connStr);
            await conn.OpenAsync();

            var qCmd = new MySqlCommand("SELECT id, content FROM questions WHERE flowertype_id = @ftype ORDER BY RAND() LIMIT 1", conn);
            qCmd.Parameters.AddWithValue("@ftype", flower.TypeId);

            using var qReader = await qCmd.ExecuteReaderAsync();
            if (!await qReader.ReadAsync())
            {
                Debug.WriteLine($"❌ No question found for flower type {flower.TypeId}, skipping slot {slot}");
                activeQuestions[slot] = null;
                return;
            }

            var question = new QuestionWithAnswers
                {
                    Id = qReader.GetInt32(0),
                    Content = qReader.GetString(1),
                    Answers = new List<Answer>()
                };
            var qid = question.Id;
            await qReader.CloseAsync();

            var aCmd = new MySqlCommand("SELECT id, content, is_correct FROM answers WHERE question_id = @qid", conn);
            aCmd.Parameters.AddWithValue("@qid", qid);
            using var aReader = await aCmd.ExecuteReaderAsync();
            while (await aReader.ReadAsync())
            {
                question.Answers.Add(new Answer
                    {
                        Id = aReader.GetInt32(0),
                        Content = aReader.GetString(1),
                        IsCorrect = aReader.GetBoolean(2)
                    });
            }

            if (question.Answers.Count == 0)
            {
                Debug.WriteLine($"❌ Question found but no answers: {question.Content}");
                activeQuestions[slot] = null;
                return;
            }

            Debug.WriteLine($"✅ Question loaded for slot {slot}: '{question.Content}' with {question.Answers.Count} answers");
            activeQuestions[slot] = question;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"[LoadQuestionForSlot] ⚠️ Exception: {ex.Message}");
        }
    }


    private async void OpenQuestionModal(int slot)
    {
        await ShowCoinChange(-1, "defaultSound");
        if (UserSession.CurrentUser == null)
        {
            Debug.WriteLine($"⛔ Cannot open modal: user is null");
            return;
        }
        Debug.WriteLine($"📥 Opening question modal for slot {slot}");

        var flower = UserSession.CurrentUser.Flowers.FirstOrDefault(f => f.Slot == slot);
        if (flower == null || flower.IsDead)
        {
            Debug.WriteLine($"⛔ Flower is dead or missing, cannot open modal for slot {slot}");
            return;
        }

        if (!activeQuestions.TryGetValue(slot, out var question) || question == null)
        {
            Debug.WriteLine($"⚠️ Cannot open modal, question is null for slot {slot}");
            return;
        }

        currentQuestionSlot = slot;
        selectedAnswerId = null;
        StateHasChanged();
    }

    private async void CloseQuestionModal()
    {
        await ShowCoinChange(-1, "defaultSound");
        currentQuestionSlot = null;
        selectedAnswerId = null;
        StateHasChanged();
    }
    private async Task UpdateFlowerAndCoins(Flower flower)
    {
        try
        {
            var connStr = "Server=31.31.197.28;Port=3310;Database=u3126643_flowers_db;User=u3126643_user_app;Password=xxxKKTX6815!;Charset=utf8mb4;SslMode=none;";
            using var conn = new MySqlConnection(connStr);
            await conn.OpenAsync();

            var updateHp = new MySqlCommand("UPDATE flowers SET hp = @hp WHERE id = @fid", conn);
            updateHp.Parameters.AddWithValue("@hp", flower.Hp);
            updateHp.Parameters.AddWithValue("@fid", flower.Id);
            await updateHp.ExecuteNonQueryAsync();

            var updateCoins = new MySqlCommand("UPDATE users SET coins = @coins WHERE id = @id", conn);
            updateCoins.Parameters.AddWithValue("@coins", UserSession.CurrentUser.Coins);
            updateCoins.Parameters.AddWithValue("@id", UserSession.CurrentUser.Id);
            await updateCoins.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"⚠️ DB Update Error: {ex.Message}");
        }
    }

    private async Task SubmitAnswer()
    {
        if (currentQuestionSlot is null || !activeQuestions.TryGetValue(currentQuestionSlot.Value, out var question))
            return;

        var selected = question?.Answers.FirstOrDefault(a => a.Id == selectedAnswerId);
        if (selected == null)
            return;

        var flower = UserSession.CurrentUser.Flowers.First(f => f.Slot == currentQuestionSlot.Value);

        if (selected.IsCorrect)
        {
            UserSession.CurrentUser.Coins += 5;
            flower.Hp = Math.Min(flower.Hp + 1, flower.MaxHp);
            await UpdateFlowerAndCoins(flower); // пишем в БД сразу после изменения
            await ShowCoinChange(5, "successSound");
        }
        else
        {
            flower.Hp = Math.Max(0, flower.Hp - 1);
            await UpdateFlowerAndCoins(flower);
            await ShowCoinChange(0, "loseSound");
        }

        // 🛠️ Обновление в БД
        await UpdateFlowerAndCoins(flower);

        activeQuestions.Remove(currentQuestionSlot.Value);
        CloseQuestionModal();
        StateHasChanged();
    }

    public void Dispose()
    {
        questionTimer?.Stop();
        questionTimer?.Dispose();
    }
    private string GetShopFlowerImage(Flower flower)
    {
        // Список всех доступных изображений цветов в магазине
        string[] shopImages = new[]
        {
        "aloe_medicine.png",
        "cactus_physics.png",
        "fern_biology.png",
        "ficus_classic.png",
        "mandarin_ecology.png",
        "onion_chemistry.png",
        "orchid_poetry.png",
        "palm_climate.png",
        "predatory_grass.png",
        "rose_eternal.png",
        "violet_wave.png"
    };

        // Найдём индекс текущего цветка в списке shopFlowers
        int index = shopFlowers.IndexOf(flower);
        if (index < 0) return "/images/flowers/empty.png"; // Если цветок не найден

        // Возвращаем путь к изображению
        return $"/images/flowers_shop/{shopImages[index % shopImages.Length]}";
    }

    private void StartTutorial()
    {
        showTutorialPrompt = false;
        IsLeftPanelActive = true;
        panelState = panelState == "hidden" ? "visible" : "hidden";
        buttonState = buttonState == "hidden" ? "visible" : "hidden";
        TutorClick();
    }

    private void TutorClick()
    {
        switch (countTutor)
        {
            case 1:
                InstructionTytle = "Твой домашний сад";
                InstructionText = "Смотри - это твой маленький домашний сад. Здесь ты можешь выращивать свои растения, но они необычные: их не нужно поливать и удобрять, но важно правильно отвечать на их вопросы!";
                TutorFlower = true;
                countTutor++;
                break;
            case 2:
                InstructionTytle = "Вопросы";
                InstructionText = "Это - те самые вопросы. Можешь попробовать ответить на них, и, если ответишь правильно, тебе начислят 5 монеток! Но если ошибешься - твое растение начнет вянуть! Следи, чтобы не пришлось его выкидывать!";
                TutorFlower = false;
                TutorQuestion = true;
                countTutor++;
                break;
            case 3:
                InstructionTytle = "Твои монеты";
                InstructionText = "На этом поле ты можешь посмотреть свое количество монет. Они тебе пригодятся для покупки новых видов цветов!";
                TutorQuestion = false;
                TutorMoney = true;
                countTutor++;
                break;
            case 4:
                InstructionTytle = "Продажа цветов";
                InstructionText = "А тут ты можешь продать свои цветы. Чем лучше самочувствие у цветка - тем больше ты можешь заработать!";
                TutorMoney = false;
                TutorMyFlowers = true;
                countTutor++;
                break;
            case 5:
                InstructionTytle = "Покупка цветов";
                InstructionText = "Теперь - самое интересное. Это магазин! Тут ты можешь купить самые разные цветы и расширить свою коллекцию. Цветы продаются в стандартном состоянии, но ты можешь заставить их расцвести!";
                TutorMyFlowers = false;
                TutorShop = true;
                countTutor++;
                break;
            case 6:
                InstructionTytle = "Настройки";
                InstructionText = "Если тебе не нравится громкость музыки или эффектов, тут ты сможешь настроить громкость для себя!";
                TutorShop = false;
                TutorSettings = true;
                countTutor++;
                break;
            case 7:
                InstructionTytle = "Инструкция";
                InstructionText = "На этом все! Как видишь, тут все просто. Но если ты что-то забудешь - можешь нажать на эту кнопку, и всплывет окно с инструкцией. Приятного выращивания!";
                TutorSettings = false;
                TutorInstruct = true;
                countTutor++;
                break;
            case 8:
                InstructionTextBox();
                TutorInstruct = false;
                TutorEnd = true;
                buttonState = buttonState == "hidden" ? "visible" : "hidden";
                panelState = panelState == "hidden" ? "visible" : "hidden";
                IsLeftPanelActive = false;
                break;
        }

        StateHasChanged(); // Обновляем UI после изменения currentRect
    }

    private void InstructionTextBox()
    {
        InstructionTytle = "Инструкция";
        InstructionText = "Это - твой маленький домашний сад. Здесь ты можешь выращивать свои растения, их не нужно поливать и удобрять, но важно правильно отвечать на их вопросы. Если ответ правильный, тебе начислят 5 монет, при ошибке - твое растение начнет вянуть. При большом количестве ошибок цветок полностью завянет и его придется выкинуть. Справа сверху указано твое количество монет. Чтобы продать или купить цветы, нужно открыть вкладку с тележкой или цветком. Во вкладке настроек можно поменять громкость. Приятного выращивания!";
    }
    

}
   
       

@if (UserSession.CurrentUser != null)
{
    <div class="game-wrapper">
        <div class="left-panel @panelState @(IsLeftPanelActive ? "active" : "")">
                <div class="text-container">
            <div class="text-window">
                <h3>@InstructionTytle</h3>
                            <p style="text-align: left;">@InstructionText</p>
                            
                       </div>
                                       <button class="next-button @buttonState @(TutorEnd ? "active" : "")" @onclick="TutorClick">Далее</button>
                                           <div class="image-container">
                               <img src="/images/icons/toad.png" class="bottom-image" />
                                   </div>
                       </div>
                           
    </div>
    <div class="game-container">
               <button class="top-left-button @(TutorInstruct ? "active" : "")" @onclick="InstructionsButton"><img src="/images/icons/lamp.png"/></button>
                                    
        <div class="game-field">
            <div class="shelf"> 
                    <div class="shelf-background"></div>  <!-- добавляем фон полки -->
                @foreach (var slot in new[] { 0, 1, 2 })
                {
                    <div class="flower-slot">
                        <!-- Горшок (должен быть внизу) -->
                        <div class="pot-box">
                            <img src="@GetPotImage(slot)" />
                        </div>

                        <!-- Цветок (должен быть сверху) -->
                                <div class="flower-box">
                                    <img class="@(TutorFlower ? "active" : "")" src="@GetFlowerImage(slot)" />
                            @if (activeQuestions.ContainsKey(slot) && activeQuestions[slot] != null)
                            {
                                <div class="question-bubble @(TutorQuestion ? "active" : "")" @onclick="@(() => OpenQuestionModal(slot))">
                                    ?
                                </div>
                            }
                        </div>
                    </div>
                 
                 }
            </div>
            <div class="shelf">
                <div class="shelf-background"></div>  <!-- добавляем фон полки -->
                @foreach (var slot in new[] { 3, 4, 5 })
                {
                                            <div class="flower-slot">
                        <!-- Горшок (должен быть внизу) -->
                        <div class="pot-box">
                            <img src="@GetPotImage(slot)" />
                        </div>

                        <!-- Цветок (должен быть сверху) -->
                        <div class="flower-box">
                                  <img class="@(TutorFlower ? "active" : "")" src="@GetFlowerImage(slot)" />
                            @if (activeQuestions.ContainsKey(slot) && activeQuestions[slot] != null)
                            {
                                <div id="questionId" class="question-bubble @(TutorQuestion ? "active" : "")"  @onclick="@(() => OpenQuestionModal(slot))">
                                    ?
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        
        </div>
            <div id="moneyId" class="money-container">
                <img class="money-icon @(TutorMoney ? "active" : "")" src="images/icons/money.png" />
            <div class="money-amount">@UserSession.CurrentUser.Coins</div>
        </div>

        <div class="slots-panel">
            <div class="slot-button" @onclick="OpenMyFlowers">
                        <img class="slot-icon @(TutorMyFlowers ? "active" : "")" src="images/icons/my_flowers.png" />
            </div>
            <div class="slot-button" @onclick="OpenShop">
                    <img class="slot-icon @(TutorShop ? "active" : "")" src="images/icons/shop.png" />
            </div>
            <div class="slot-button" @onclick="OpenSettings">
                    <img class="slot-icon @(TutorSettings ? "active" : "")" src="images/icons/settings.png" />
            </div>
            @*             <div class="slot-button" @onclick="GoToLogin">
                <img class="slot-icon" src="images/icons/home.png" />
            </div> *@
        </div>
            @if (showTutorialPrompt)
            {
                        <div class="tutorial-prompt-overlay">
                            <div class="tutorial-prompt-container">
                                <h3>Обучение</h3>
                                <p>Привет! Вижу, ты тут впервые. Хочешь пройти краткое обучение по игре?</p>
                                <div class="tutorial-prompt-buttons">
                                            <button class="btn-yes" @onclick="StartTutorial">Да, конечно!</button>
                                                                    <button class="btn-no" @onclick="() => showTutorialPrompt = false ">Нет, спасибо</button>
                                </div>
                            </div>
                        </div>
            }
    </div>
        <!-- Модальные окна -->
    <!-- Модальные окна -->
    @if (showSettings || showShop || showMyFlowers)
    {
        <div class="modal-overlay"></div>
    }


    @if (showSettings)
    {
        <div class="modal_settings">
            <h2>@Localizer["SettingsHeader"]</h2>

            <label>
                @Localizer["LanguageLabel"]
                <select @bind="SelectedLanguage">
                    <option value="ru">@Localizer["RussianOption"]</option>
                    <option value="en">@Localizer["EnglishOption"]</option>
                </select>
            </label>

           
            <label>
                @Localizer["MusicVolumeLabel"]
                    <input class="volume-slider" type="range" min="0" max="100" @bind-value="MusicVolume" @bind-value:event="oninput" />
            </label>

            <label>
                @Localizer["EffectsVolumeLabel"]
                    <input class="volume-slider" type="range" min="0" max="100" @bind-value="EffectsVolume" @bind-value:event="oninput" />
            </label>

            <div class="modal-buttons">
                <button @onclick="GoToLogin">@Localizer["LogoutButtonText"]</button>
                <button @onclick="CloseModals">@Localizer["CloseButtonText"]</button>
            </div>
        </div>
    }


        @if (showShop)
        {
            <div class="modal1">
                <h3>@Localizer["StoreHeader"]</h3>

                <div class="shop-scroll-wrapper">
                    <div class="flower-grid">
                        @foreach (var flower in shopFlowers)
                        {
                            <div class="flower-card">
                                <img src="@GetShopFlowerImage(flower)" class="flower-img" />
                                <div class="flower-name">@flower.DisplayName</div>
                                <div class="spacer"></div> <!-- вот эта вставка важна -->
                                <div class="flower-action">
                                   <button class="flower-button" @onclick="@(async () => { BuyFlower(flower); await JSRuntime.InvokeVoidAsync("playSound", "defaultSound"); })">
                                        @Localizer["BuyPriceTag"]@flower.PriceBuy
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <button class="close-full-button" @onclick="@(async () => { CloseModals(); await JSRuntime.InvokeVoidAsync("playSound", "defaultSound"); })">
                    @Localizer["CloseButtonText"]
                </button>
            </div>
        }

    @if (showShopError)
    {
        <div class="modal-overlay"></div>
        <div class="modal1 error-modal show">
            <h3 class="modal-title">@shopTitleMessage</h3>
            <p>@shopErrorMessage</p>
                        <button class="close-full-button" @onclick="@(async () => { showShopError = false; await JSRuntime.InvokeVoidAsync("playSound", "defaultSound"); })">
                    @Localizer["CloseButtonText"]
                </button>
        </div>
    }

    @if (showMyFlowers)
    {
        <div class="modal1">
            <h3>@Localizer["FlowerHeadder"]</h3>
            <div class="shop-scroll-wrapper">
                @if (UserSession.CurrentUser.Flowers.Count > 0)
                {
                    <div class="flower-grid">

                        @foreach (var flower in UserSession.CurrentUser.Flowers.OrderBy(f => f.Slot))
                        {
                            var state = flower.GetStateImage().Split('/').Last().Replace(".png", "");
                            int sellPrice = flower.PriceSell;

                            switch (state)
                            {
                                case "pre_fall": sellPrice /= 2; break;
                                case "fall": sellPrice = 0; break;
                                case "pre_rise": sellPrice = (int)(sellPrice * 1.5); break;
                                case "rise": sellPrice *= 2; break;
                            }
                                <div class="flower-card">
                                    <div class="image-stack">
                                        <img src="/images/box/cream_box.png" class="pot-image" />
                                        <img src="@flower.GetStateImage()" class="flower-image1" />
                                    </div>

                                    <div class="flower-title">@flower.DisplayName</div>
                                    <div class="flower-status">@GetStateDisplayName(state, flower)</div>
                                    <div class="spacer"></div> <!-- вот эта вставка важна -->
                                    <div class="flower-actions">
                                        
                                        @if (flower.IsDead)
                                        {
                                            <button class="flower-button remove" @onclick="() => ThrowOutFlower(flower)">
                                                🗑 <span>@Localizer["RemovePlantTag"]</span>
                                            </button>
                                        }
                                        else
                                        {
                                                                <button class="flower-button" @onclick="() => SellFlower(flower, sellPrice)">
                                                @Localizer["SellPriceTag"] @sellPrice
                                            </button>
                                        }
                                    </div>
                                </div>



                            @* <div class="flower-card">
                                <img src="@flower.GetStateImage()" class="flower-img"/>
                                <div class="flower-name">@flower.DisplayName</div>
                                <div class="flower-state">@Localizer["FlowerState"]@state</div>
                                <div class="flower-action">
                                    @if (flower.IsDead)
                                    {
                                        <button class="action-button throw" @onclick="() => ThrowOutFlower(flower)">
                                            🗑
                                            <span>@Localizer["RemovePlantTag"]</span>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="action-button" @onclick="() => SellFlower(flower, sellPrice)">
                                            @Localizer["SellPriceTag"] @sellPrice
                                        </button>

                                    }

                                </div>
                            </div> *@
                        }
                    </div>
                }
                else
                {
                    zeroFlowersMessage = "У вас нет цветов, купите их в магазине!";
                    <p>@zeroFlowersMessage</p>
                }  
            </div>
            <button class="close-full-button" @onclick="CloseModals">
                @Localizer["CloseButtonText"]
            </button>

        </div>
    }
    
    @if (currentQuestionSlot != null && activeQuestions.ContainsKey(currentQuestionSlot.Value))
    {
        var question = activeQuestions[currentQuestionSlot.Value];
        if (question != null)
        {
            <div class="question-modal">
                <h3>@Localizer["QestionHeader"]</h3>
                <p>@question.Content</p>
                    @foreach (var answer in question.Answers)
                    {
                        <label>
                            <input type="radio" name="answer" value="@answer.Id"
                                   @onchange="@(
                    async () =>
                    {
                        selectedAnswerId = answer.Id;
                        await JSRuntime.InvokeVoidAsync("playSound", "defaultSound");
                    }
                )"
                                   checked="@((selectedAnswerId == answer.Id))" />
                            @answer.Content
                        </label>
                    }


                <button class="action-button1" @onclick="SubmitAnswer">Ответить</button>
                <button class="close-full-button1" @onclick="CloseQuestionModal">Закрыть</button>
            </div>
        }
    }
        
        <audio id="backgroundMusic"
               src="/audio/background-loop.mp3"
               preload="auto"
               loop
               muted
               playsinline>
        </audio>
        <audio id="successSound" src="/audio/success.mp3" preload="auto"></audio>
        <audio id="loseSound" src="/audio/lose.mp3" preload="auto"></audio>
        <audio id="defaultSound" src="/audio/default.mp3" preload="auto"></audio>

        @if (ShowCoinNotification)
        {
@*             <div class="coin-notification @(IsPositiveCoin ? "positive" : "negative")">
                <span>@CoinMessage</span>
            </div> *@
            <div class="coin-notification
            @(ShowCoinNotification ? (IsPositiveCoin ? "positive show" : "negative show") : "")">
                <span>@CoinMessage</span>
            </div>
        }
 </div>

 }