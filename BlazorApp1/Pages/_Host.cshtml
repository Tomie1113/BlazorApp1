@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace BlazorApp1.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="css/site.css" rel="stylesheet" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="BlazorApp1.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<script>
    const DESIGN_W = 800;
    function updateScale() {
      const f = document.querySelector('.game-frame');
      if (!f) return;
      const s = f.parentElement.clientWidth / DESIGN_W;
      f.style.setProperty('--game-scale', s);
    }
    window.addEventListener('resize', updateScale);
    window.addEventListener('load',   updateScale);
</script>
<body>
    <audio id="backgroundMusic"
           src="/audio/background-loop.mp3"
           preload="auto"
           autoplay
           loop>
    </audio>
    <component type="typeof(App)" render-mode="ServerPrerendered" />
   @*  <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
 *@
    <script src="_framework/blazor.server.js"></script>
    <script src="js/audio.js"></script>
    <script>
        function updateSliderBackground(slider) {
          const val = (slider.value - slider.min) / (slider.max - slider.min) * 100;
          slider.style.backgroundSize = val + '% 100%';
        }

        document.addEventListener("DOMContentLoaded", () => {
          document.querySelectorAll('.volume-slider').forEach(slider => {
            updateSliderBackground(slider);
            slider.addEventListener('input', () => updateSliderBackground(slider));
          });
        });
    </script>
</body>
</html>
